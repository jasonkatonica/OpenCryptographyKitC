#******************************************************************************
#******************************************************************************

# Makefile needs to define this as relative path from Makefile's dir to the base of ICC source dir
ICC_ROOT=..

# This is the version tag inserted into the ICC shared library names
# This exists to allow us to have both a certified and non-certified ICC in
# the same process space. Namespacing takes care of MOST of the issues,
# but some OS configs will not load two libs of the same name on different paths
# so the libraries have their own name and SONAME as well
# 
include ./VTAG.mk

#--- Adjust this to your current operating system, or override it from the
#       command line when invoking make.
######################################################
# DO NOT CHANGE THIS or production builds will break #
######################################################
OPSYS  = AMD64_LINUX
# CONFIG=<debug|release|asan> MUST be lowercase

CONFIG = debug
# [devloper] or OFFICIAL build
BUILD  = developer
#developer_CFLAGS = -DVTAG=$(VTAG) -DBURST_READ # Allows testing of ARM code paths on x86
developer_CFLAGS = -DVTAG=$(VTAG)
OFFICIAL_CFLAGS = -DICC_OFFICIAL_BUILD -DVTAG=$(VTAG)
#
# Windows only, the signing script
#
SIGN_COMMAND    = /build/build/scripts/signwindowsfile.ksh

#-- Directories
PACKAGE_DIR    = ../package
NOSHIP_DIR 	   = $(PACKAGE_DIR)/NOSHIP
RTE_DIR        = $(PACKAGE_DIR)/icc
SDK_DIR        = $(PACKAGE_DIR)/iccsdk
NOSHIP_RTE_DIR = $(NOSHIP_DIR)/icc
PRNG_DIR       = fips-prng
TRNG_DIR       = TRNG
OSSL_RTE_DIR   = $(RTE_DIR)/osslib
ICC_RTE_DIR    = $(RTE_DIR)/icclib
NOSHIP_ICC_RTE_DIR = $(NOSHIP_RTE_DIR)/icclib
ICCPKG_DIR     = ../iccpkg
# placeholder for a FIPS/non-FIPS hack job where the object name
# needs to be changed for z/OS


#- Default targets, before the makefile stubs below (some of which
# have their own targets) so it *IS* the default
#- Do everything EXCEPT create sources (default target)

default: all



# Define what OpenSSL version we are using.
include ./opensslver.mk
include ./platforms.mk
include ./icc_defs.mk


# Include the components for building the zlib files we use in ICC
include ./zlib.mk

# Support tools
include ./tools.mk

#--- What we need to build
# Moved to icc_defs.mk , platform specific
#ICCDLL_NAME = $(SHLPRFX)icclib$(VTAG)$(SHLSUFX)
ICCDLL   = $(ICC_RTE_DIR)/$(ICCDLL_NAME)
ICCLIB   = $(SDK_DIR)/$(STLPRFX)icc$(STLSUFX)
OSSLLIB  = $(OSSLOBJ_DIR)/$(OSSLLIB_NAME)$(STLSUFX)
ICCTEST  = icctest$(EXESUFX)
PRNGTST1 = fips-prng-testprg$(EXESUFX)
PRNGTST2 = fips-prng-testprg2$(EXESUFX)
ICCSDK   = $(PACKAGE_DIR)/iccsdk.tar
ICCRTE   = $(PACKAGE_DIR)/iccrte.tar


MYOPENSSL  = $(SDK_DIR)/openssl$(EXESUFX)
DOXYFILE   = $(SDK_DIR)/ICC_API_htm.tar
ICCREAD    = iccread$(EXESUFX)
ICC400     = icc400$(EXESUFX)
ICCPKG_TEST = $(ICCPKG_DIR)/$(ICCTEST)

SDK_HDRS = icc.h icc_a.h iccglobals.h

# Autogenerated code. (Also export files)
AUTOGEN = icc_a.c icc_a.h icclib_a.c  \
	../iccpkg/iccpkg_a.c ../iccpkg/iccpkg_a.h ../iccpkg/gsk_wrap.c 

# define OpenSSL related variables
include ./ossl.mk

# Include platform specific make functions. These can use "native"
# make features if necessary.

include platforms/$(OPENSSL_LIBVER)/$(OPSYS)_.mk
# Builds a special package for GSKit.
# iccpkg: comes from ICCPKG.mk
include ./ICCPKG.mk

# Delta timing code. High res counters
include ./delta.mk

# Pick up default install path for fallback code
include ../iccpkg/gsk_crypto.mk

# Stub that lets us know standalone ICC and FIPS ICC
include ../iccpkg/muppet.mk

# Fix a problem only on z/OS, the two stub loaders created from icc.c need to have 
# different object names on this platform
# Since the FIPS ICC was already built, change ONLY the name of the object used in non-FIPS mode

ifeq ($($strip $(IS_FIPS)),)
   MYICC = newicc
else
   MYICC = icc
endif		

API_DIR = platforms/$(OPENSSL_LIBVER)/API

# What we build.

TARGETS  = Build_OSSL_Complete $(MYOPENSSL)  tmp/dummyfile  \
	signer$(EXESUFX) \
	$(DELTA) \
	$(STLPRFX)zlib$(STLSUFX)  \
	$(ICCDLL) $(ICCLIB)  \
	$(ICCTEST) \
	$(ICCRTE) \
	$(TOOLS) \
	$(ICCSDK) \
	$(ICCPKG_TEST)



#	$(CAVSON)

#-------------------------------------------------------------------------------
#- Targets
#-------------------------------------------------------------------------------

# log our build machine name and working directory
ctx:
	-uname -a; pwd

all: ctx build_all package_all

#- Create the ICC source code
#- This is typically run once on one machine then tar'd up and distributed
#- to the real build machines.
create_all:  create_openssl create_zlib create_icc_no_legacy
create_all_FIPS:  create_openssl create_zlib create_icc_FIPS create_icc_no_legacy

#- Create the OpenSSL sources from tarfile and patches
#- This has NO automated dependencies as that messes the automated builds
#- this MUST be tripped manually.
#-
create_openssl: ../openssl_source/$(OPENSSL_VER)-icc.tar.gz
# Untar the sources for the version of OpenSSL we use
# since 1.1.1u the OpenSSL tar has icc patches applied
# the first dir name in the archive will vary so we make an empty directory to extract
	[ -n "$(EX_SUFFIX)" ] || \
	( \
	   cd .. ; \
	   rm -r $(OPENSSL_VER) openssl ; \
	   rm -rf x; mkdir x; cd x; \
	   tar xzf ../openssl_source/$(OPENSSL_VER)-icc.tar.gz ; \
	   mv `ls -d *`/openssl ../$(OPENSSL_VER) ; \
	   chmod +x ../$(OPENSSL_VER)/Configure ; \
	   cd ..; \
	)
# Apply all the patches
# rm Makefile , which SHOULDN'T BE THERE ANYWAY
# Note: since 1.1.1u we are not applying patches.
	( \
	   cd $(OSSL_DIR) ;\
	   [ -n "$(EX_SUFFIX)" ] || \
		sh ../openssl_source/tools/patchem2 "../openssl_source/$(OPENSSL_BIN)" ;\
		chmod +x tools/*;\
	   	rm -f Makefile; \
	)

#- Create the OpenSSL sources from tarfile and patches on zOS
#- This has NO automated dependencies as that messes the automated builds
#- this MUST be tripped manually.
#-
create_openssl_zos: ../openssl_source/$(OPENSSL_VER).tar.gz
# Untar the sources for the version of OpenSSL we use
# Skip this step if using extracted openssl files in Clearcase
	[ -n "$(EX_SUFFIX)" ] || \
	( \
	   cd .. ;\
	   gzip -d -c openssl_source/$(OPENSSL_VER).tar.gz | pax -ofrom=ISO8859-1,to=IBM-1047 -rv  ; \
	)
# Apply all the patches
# rm Makefile , which SHOULDN'T BE THERE ANYWAY
# Move the script which allows zOS to build properly into place
	( \
	   cd $(OSSL_DIR) ;\
	   [ -n "$(EX_SUFFIX)" ] || \
		sh ../openssl_source/tools/patchem2 "../openssl_source/$(OPENSSL_BIN)" ;\
	   rm -f Makefile; \
	   cp ../openssl_source/tools/c99.sh . ;\
	)

#- Build and run the code generator if necsssary
#- We typically only do this on one (fast) platform as setup for the
#- builds. Then copy the populated source tree to the other build machines
#- Avoids the Java "write once - debug everywhere" problem
#- 
create_dirs: 
	-$(MKDIR) exports ../iccpkg/exports
	-$(MKDIR) ../icc_test
	-$(MKDIR) ../package
	-$(MKDIR) ../package/iccsdk
	-$(MKDIR) ../package/icc
	-$(MKDIR) ../package/icc/icclib
	-$(MKDIR) ../package/icc/osslib
	-$(MKDIR) $(NOSHIP_DIR)
	-$(MKDIR) $(NOSHIP_RTE_DIR)
	-$(MKDIR) $(NOSHIP_ICC_RTE_DIR)
#       Delete these files they aren't used any more
	-$(RM) deleted/*

iccVdump$(OBJSUFX): iccVdump.c buildinfo.h
	$(CC) $(CFLAGS) iccVdump.c

iccVdump$(EXESUFX): iccVdump$(OBJSUFX)
	$(LD) $(LDFLAGS) iccVdump$(OBJSUFX)

#
# Note that this will ONLY work on Linux as there's a gcc dependency to 
# preprocess the C header files
#
ICC_ver.txt: iccVdump$(EXESUFX) 
	./iccVdump$(EXESUFX) >ICC_ver.txt

#- Run the code generator for those OS's where there's
#- no "old/FIPS" ICC
#- We assume the pre-req dirs were created already
create_icc_no_legacy: ICC_ver.txt create_dirs functions.txt \
			ICCencapsulator.java ICC_ver.txt
	javac ICCencapsulator.java
	java ICCencapsulator
	touch create_icc_no_legacy.0
	-$(RM) create_icc.0
	cat ../iccpkg/muppet.mk

# Note that this will edit a controlled file (icc/functions.txt) so don't check it in!
create_icc_FIPS:
	cp functions.txt functions.txt.bak
	sed -i 's/^# non-FIPS;$$/# FIPS;/' functions.txt
	sed -i 's/^PREFIX=N;$$/PREFIX=C;/' functions.txt

#
# Just an annoyance during dev. builds. It's fine if it's empty. Typically a dev build.
#
buildinfo.h:
	touch buildinfo.h

#- Run BVT
# no dependancies - that causes re-signing into .sig files since they've been deleted
tests:
	$(ICC_RUN_SETUP) $(OPENSSL_PATH_SETUP)$(TEST_CMD)

#- Just build
build_all:  Build_OSSL_Complete $(TARGETS)

build_all_os400: Build_OSSL_Complete $(TARGETS400)

openssl.c: ../$(OPENSSL_VER)/apps/openssl.c
	$(CP)  ../$(OPENSSL_VER)/apps/openssl.c $@


# This generates sdk contents

$(ICCPKG_TEST): $(ICCLIB) $(ICCTEST)
	unset MAKEOVERRIDES MAKELEVEL MAKEFILES; "$(MAKE)" -C $(ICCPKG_DIR) all;


#- Clean both ICC & OpenSSL
#- Note the OS400 clean is done directly here, not as a dependency as it won't exist on some platforms
clean_all: clean_openssl clean clean_tools  
	-$(CLEAN400_ICC)
	-$(CLEAN400_OSSL)
	-$(CLEAN400_MODS)	

#- will need a create_all (includes patching) to get it back
remove_openssl:
	-$(RM) -r $(OSSL_DIR)

#- Clean just OpenSSL
clean_openssl:
	-$(CLEAN_OSSL)
	-$(RM) tmp/tmp/*
	-$(RM) tmp/*$(OBJSUFX) tmp/dummyfile
	-$(RM) Build_OSSL_Complete


#- Clean just ICC
clean: clean_iccpkg
	-$(RM) $(TARGETS) *$(OBJSUFX) $(EXTRA_FILES) $(SDK_DIR)/*.h
	-$(RM) ./openssl$(EXESUFX) $(SHLPRFX)icclib$(SHLSUFX) $(STLPRFX)icc$(STLSUFX)
	-$(RM) *.so *.dylib *.dll *.sl *.x *.lib
	-$(RM) *.ilk *.manifest *.pdb *.class
	-$(RM) tmp/*/*
	-$(RM) ../package/icc/icclib/*
	-$(RM) -r $(SDK_DIR)/*
	-$(RM) openssl.c high_res_timer.c
	-$(RM) iccVdump$(EXESUFX)

# tools has no Makefile
clean_tools:
	-$(RM) $(TOOLS)

clean_iccpkg:
	( if [ -d ../iccpkg/ ] ; then \
		cd ../iccpkg; \
		unset MAKEOVERRIDES MAKELEVEL MAKEFILES ; \
		"$(MAKE)" clean; \
	  fi; \
	)

#- Clean out everything including the autogenerated files
scrubbed: clean
	-$(RM) $(AUTOGEN) exports/* ../iccpkg/exports/* ICCencapsulator.class
	-$(RM) -r $(OSSL_DIR)

#- Build ICC package files (SDK & RTE)
package_all: $(ICCSDK) $(ICCRTE)


#- Build ICC SDK
$(ICCSDK): $(EXTRAS)
	- cd $(PACKAGE_DIR); $(TARCMD) iccsdk.tar iccsdk

#- Build ICC RTE
$(ICCRTE): $(RTE_DIR)/ReadMe.txt $(NOSHIP_RTE_DIR)/ReadMe.txt
	- cd $(PACKAGE_DIR); $(RM) icc/icclib/*.exp icc/icclib/*.lib
	- cd $(PACKAGE_DIR); $(TARCMD) iccrte.tar icc/ReadMe.txt icc/icclib


#- Build (copy) SDK headers
$(SDK_DIR)/icc.h: icc.h
	$(CP) icc.h $@

$(SDK_DIR)/icc_a.h: icc_a.h
	$(CP) icc_a.h $@

$(SDK_DIR)/iccglobals.h: iccglobals.h
	$(CP) iccglobals.h $@

$(ICCPKG_DIR)/iccversion.h: iccversion.h
	$(CP) iccversion.h $@

$(ICCPKG_DIR)/buildinfo.h: buildinfo.h
	$(CP) buildinfo.h $@

#- Run ICC BVT test
icc_run: $(ICCTEST)
	( \
		$(TOUCH) GSKIT_CRYPTO.log; \
		$(ICC_RUN_SETUP) ./icctest; \
		cat GSKIT_CRYPTO.log; \
		$(RM) GSKIT_CRYPTO.log ; \
	)

#- Debug ICC BVT test
icc_dbg: $(ICCTEST)
	$(ICC_RUN_SETUP) $(DEBUGGER) ./icctest

# List of objs - minus the trigger for exec on load in a shared object
LIBOBJS1 =   fips$(OBJSUFX)  \
	platform$(OBJSUFX) \
	iccerr$(OBJSUFX) status$(OBJSUFX) \
	fips-prng-RAND$(OBJSUFX) fips-prng-err$(OBJSUFX) \
	SP800-90$(OBJSUFX) \
	SP800-90HashData$(OBJSUFX) \
	ds$(OBJSUFX)  \
	SP800-90Cipher$(OBJSUFX) utils$(OBJSUFX) \
	SP800-90HMAC$(OBJSUFX) \
	SP800-108$(OBJSUFX) \
	$(ASMOBJS) $($(OPSYS)_LIBOBJS) \
	timer_entropy$(OBJSUFX) \
	personalise$(OBJSUFX) \
	noise_to_entropy$(OBJSUFX) \
	entropy_estimator$(OBJSUFX) \
	nist_algs$(OBJSUFX) \
	entropy_to_NRBG$(OBJSUFX) \
	timer_fips$(OBJSUFX) \
	TRNG_FIPS$(OBJSUFX) \
	TRNG_ALT$(OBJSUFX) \
	TRNG_ALT4$(OBJSUFX) \
	ICC_NRBG$(OBJSUFX) \
	SP800-90TRNG$(OBJSUFX) \
	extsig$(OBJSUFX) \
	SP80038F$(OBJSUFX) \
	OS_helpers$(OBJSUFX) \
	looper$(OBJSUFX) \

#- define the set of objects that end up in the ICC shared library
#- OSSL_XTRA_OBJ are files that massage the OpenSSL API to preserve
#- the ICC API across releases
LIBOBJS =   $(LIBOBJS1) platfsl$(OBJSUFX) $(OSSL_XTRA_OBJ)

#
# Get the OpenSSL objects expanded (tmp/dummyfile)
# and selectively copied
#
#Note: BUILD_OBJS coming from $(OPSYS)_.mk includes BASE_OBJS (from BASE_OSSL_FILES.mk)

tmp/tmp/dummyfile:  Build_OSSL_Complete tmp/dummyfile
	-$(MKDIR) tmp/tmp
	(cd tmp ; \
	$(CP) $(BUILD_OBJS) tmp/ ;\
	cd .. ; \
	)
	touch tmp/tmp/dummyfile

#- Build ICC shared library
#- $(ASMOBJS) is an UGLY hack to cater for small assembler files
#- needed on some platforms
#- Split this into 2 phases for the OS/X fat binaries work - resolves circular dependencies
# this is target for icclib085 shared library

$(ICCDLL_NAME):  icclib$(OBJSUFX) $(LIBOBJS)  $(STLPRFX)zlib$(STLSUFX) tmp/tmp/dummyfile  signer$(EXESUFX) tracer.h extsig.h
	$(SLD) $(SLDFLAGS) $(ICCLIB_LNK) $(EXPORT_FLAG)$(ICCLIB_EXPFILE)  icclib$(OBJSUFX) $(LIBOBJS) $(STLPRFX)zlib$(STLSUFX) \
		tmp/tmp/*$(OBJSUFX)  $(LDLIBS)

#- Regular lib
	$(STRIP) $@

#
# Add MS Authenticode signing
# Note the two files at the end are a hack to make up for a problem with GSkit's
# packaging, just placeholders, but they need to have signatures.
#
$(ICC_RTE_DIR)/$(SHLPRFX)icclib$(VTAG).dll: $(ICCDLL_NAME) signer$(EXESUFX)
	$(MT) -manifest $(ICCDLL_NAME).manifest  -outputresource:$(ICCDLL_NAME)\;2

	$(CP) $(ICCDLL_NAME) $@
	( \
		if [ -e $(SIGN_COMMAND) ] ; then \
			echo "Authenticode signing $@" ; \
			$(SIGN_COMMAND) $@ ; \
		else \
			echo " $(SIGN_COMMAND) is missing skip signing $@" ;\
		fi ;\
	)
	$(CP) $@ $(ICCDLL_NAME)
	./signer$(EXESUFX) ICCSIG.txt privkey.rsa -SELF -FILE  $(ICCDLL_NAME) $(TWEAKS)
	$(CP) $(ICCDLL_NAME) $@
	$(CP) ICCSIG.txt $(ICC_RTE_DIR)/ 
	-$(CP) $(SHLPRFX)icclib$(VTAG).pdb $(SDK_DIR)/
	-$(CP) tmp/*.pdb $(SDK_DIR)/ 
	-$(CP) $(SHLPRFX)icclib$(VTAG).x $(SDK_DIR)

$(ICC_RTE_DIR)/$(SHLPRFX)icclib$(VTAG).so : $(ICCDLL_NAME)
	$(CP) $(ICCDLL_NAME) $@

$(ICC_RTE_DIR)/$(SHLPRFX)icclib$(VTAG).sl : $(ICCDLL_NAME)
	$(CP) $(ICCDLL_NAME) $@

# dont think OSX uses this Makefile any more
#  but just in case
$(ICC_RTE_DIR)/$(SHLPRFX)icclib$(VTAG).dylib : $(ICCDLL_NAME)
	$(CP) $(ICCDLL_NAME) $@


#- Compile the ICC shared library main source
icclib$(OBJSUFX): icclib.c loaded.c loaded.h \
	$(SDK_DIR)/iccglobals.h platform.h iccversion.h \
	platfsl.h iccerr.h $(TRNG_DIR)/ICC_NRBG.h tracer.h
	$(CC) $(CFLAGS) -DOPSYS="\"$(OPSYS)\"" -DICCDLL_NAME="\"$(ICCDLL_NAME)\"" -DMYNAME=icclib$(VTAG) \
		-DINSTDIR=\""$(GSK_GLOBAL)"\" -I../$(ZLIB) \
		-I./  -I$(SDK_DIR) -I$(OSSLINC_DIR) -I$(OSSL_DIR) -I$(API_DIR) icclib.c



# Code specifically for Java/JCEPlus
OS_helpers$(OBJSUFX): OS_helpers.c
	$(CC) $(CFLAGS) OS_helpers.c

#===========================================================================
#
#- Build ICC TRNG code
#- Note some platforms, SUN_SOL8/SUN64 AIX/AIX64 need added assembler tweaks
#  which affect timer_entropy.c
#
TRNG_HDRS	= -I./ -I../$(ZLIB) -I $(SDK_DIR) -I $(OSSLINC_DIR) -I$(TRNG_DIR)  -I$(API_DIR)

TRNG_OBJS   = 	timer_entropy$(OBJSUFX) timer_fips$(OBJSUFX) \
					personalise$(OBJSUFX) nist_algs$(OBJSUFX) noise_to_entropy$(OBJSUFX) \
					entropy_estimator$(OBJSUFX) \
					TRNG_FIPS$(OBJSUFX) \
					TRNG_ALT$(OBJSUFX) \
					TRNG_ALT4$(OBJSUFX) \
					ICC_NRBG$(OBJSUFX) \
					looper$(OBJSUFX)

# Base routines to read TSC register equivalents
# Note: Depends on asm routines in OpenSSL on some platforms
timer_entropy$(OBJSUFX):  $(TRNG_DIR)/timer_entropy.c  $(TRNG_DIR)/timer_entropy.h
	$(CC) $(CFLAGS) $(TRNG_HDRS) $(ASM_TWEAKS) $(TRNG_DIR)/timer_entropy.c

# Conditioning for FIPS
# PROC_DEBIAS enables distribution squeezing. That needs to be turned
# off in all the test code.
timer_fips$(OBJSUFX):  $(TRNG_DIR)/timer_fips.c  $(TRNG_DIR)/timer_entropy.h $(TRNG_DIR)/timer_fips.h
	$(CC) $(CFLAGS) -DPROC_DEBIAS $(TRNG_HDRS) $(TRNG_DIR)/timer_fips.c


# Generic personalization routines
personalise$(OBJSUFX):  $(TRNG_DIR)/personalise.c  $(TRNG_DIR)/personalise.h
	$(CC) $(CFLAGS) $(TRNG_HDRS)  $(TRNG_DIR)/personalise.c

# Generic algs, pmax, AP, RC + self test
nist_algs$(OBJSUFX): $(TRNG_DIR)/nist_algs.c $(TRNG_DIR)/nist_algs.h
	$(CC) $(CFLAGS) $(TRNG_HDRS) $(TRNG_DIR)/nist_algs.c

# Timing delay loop, in it's own file to try and hide from optimisers
looper$(OBJSUFX): $(TRNG_DIR)/looper.c
	$(CC) $(CFLAGS) $(TRNG_HDRS) $(TRNG_DIR)/looper.c

# Take a noise source, make sure data extracted meets entropy guarantees
noise_to_entropy$(OBJSUFX):  $(TRNG_DIR)/noise_to_entropy.c  $(TRNG_DIR)/noise_to_entropy.h 
	$(CC) $(CFLAGS) $(TRNG_HDRS) $(TRNG_DIR)/noise_to_entropy.c

# Entropy to NRBG
entropy_to_NRBG$(OBJSUFX):  $(TRNG_DIR)/entropy_to_NRBG.c \
	$(TRNG_DIR)/entropy_to_NRBG.h $(TRNG_DIR)/noise_to_entropy.h
	$(CC) $(CFLAGS)  $(TRNG_HDRS) $(TRNG_DIR)/entropy_to_NRBG.c

# Code to return an entropy estimate, defences against problems the NIST algs are weak at (Patterns/counters)
entropy_estimator$(OBJSUFX):  $(TRNG_DIR)/entropy_estimator.c  $(TRNG_DIR)/entropy_estimator.h
	$(CC) $(CFLAGS) $(TRNG_HDRS)  $(TRNG_DIR)/entropy_estimator.c

MINIMAL$(OBJSUFX):  $(TRNG_DIR)/MINIMAL.c  $(TRNG_DIR)/MINIMAL.h  $(TRNG_DIR)/timer_entropy.h
	$(CC) $(CFLAGS)  $(TRNG_HDRS)  $(TRNG_DIR)/MINIMAL.c

# FIPS variant
TRNG_FIPS$(OBJSUFX): $(TRNG_DIR)/TRNG_FIPS.c $(TRNG_DIR)/TRNG_FIPS.h  $(TRNG_DIR)/timer_entropy.h 
	$(CC) $(CFLAGS)  $(TRNG_HDRS)  $(TRNG_DIR)/TRNG_FIPS.c

# Noise ^ (/dev/(u)random | HW)
TRNG_ALT$(OBJSUFX): $(TRNG_DIR)/TRNG_ALT.c $(TRNG_DIR)/TRNG_ALT.h  $(TRNG_DIR)/timer_entropy.h 
	$(CC) $(CFLAGS)  $(TRNG_HDRS)  $(TRNG_DIR)/TRNG_ALT.c


# Direct HW, assuming that has a FIPS cert. of it's own
TRNG_ALT4$(OBJSUFX):  $(TRNG_DIR)/TRNG_ALT4.c  $(TRNG_DIR)/timer_entropy.h $(PRNG_DIR)/SP800-90.h $(TRNG_DIR)/TRNG_ALT4.h
	$(CC) $(CFLAGS) $(TRNG_HDRS)  $(TRNG_DIR)/TRNG_ALT4.c

# Common code for all the TRNG's

ICC_NRBG$(OBJSUFX): $(TRNG_DIR)/ICC_NRBG.c  $(TRNG_DIR)/ICC_NRBG.h \
	$(TRNG_DIR)/TRNG_FIPS.h $(TRNG_DIR)/TRNG_ALT.h \
	$(TRNG_DIR)/TRNG_ALT4.h
	$(CC) $(CFLAGS) $(TRNG_HDRS)   $(TRNG_DIR)/ICC_NRBG.c

# API access direct to the TRNG's, mainly for testing

SP800-90TRNG$(OBJSUFX):   $(TRNG_DIR)/SP800-90TRNG.c  $(PRNG_DIR)/SP800-90.h $(PRNG_DIR)/SP800-90i.h
	$(CC) $(CFLAGS) $(TRNG_HDRS)   $(TRNG_DIR)/SP800-90TRNG.c

# Stand alone test executables for the NIST algorithm internal tests

#nist_algs1.c: $(TRNG_DIR)/nist_algs.c 
#	$(CP)  $(TRNG_DIR)/nist_algs.c $@

nist_algs1$(OBJSUFX): $(TRNG_DIR)/nist_algs.c $(TRNG_DIR)/nist_algs.h
	$(CC) $(CFLAGS) -DSTANDALONE=1 $(TRNG_HDRS) $(TRNG_DIR)/nist_algs.c $(OUT)$@

nist_algs$(EXESUFX): nist_algs1$(OBJSUFX) 
	$(LD) $(LDFLAGS)  nist_algs1$(OBJSUFX) $(LD_LIBS)



#=============================== Code sign/verify    ==============================

#- stand alone signing tool

signer$(OBJSUFX): extsig.c
	$(CC) -DSTANDALONE -DOPSYS=\"$(OPSYS)\" $(CFLAGS) -I$(OSSLINC_DIR) extsig.c $(OUT)$@

signer: signer$(OBJSUFX)
	$(LD) $(LDFLAGS) signer$(OBJSUFX) $(OSSL_DIR)/libcrypto.a $(LDLIBS)

signer.exe: signer$(OBJSUFX) tmp/tmp/dummyfile $(SLIBCRYPTO)
	$(LD) $(LDFLAGS) signer$(OBJSUFX) $(OSSL_DIR)/libcrypto_static.lib $(LDLIBS)

extsig$(OBJSUFX): extsig.c
	$(CC) $(CFLAGS) -I$(SDK_DIR)  -I$(OSSLINC_DIR) extsig.c

#- Build ICC Err code
iccerr$(OBJSUFX): iccerr.c iccerr.h $(SDK_DIR)/iccglobals.h
	$(CC) $(CFLAGS)  -I$(SDK_DIR) -I$(OSSLINC_DIR) -I$(OSSL_DIR) iccerr.c

#- Build ICC status message code
status$(OBJSUFX): status.c status.h icclib.h 
	$(CC) $(CFLAGS)  -I$(SDK_DIR) -I$(OSSLINC_DIR) -I$(OSSL_DIR) -I$(API_DIR) status.c

#- Build ICC FIPS code
fips$(OBJSUFX): fips.c fips.h icclib.h iccerr.h $(PRNG_DIR)/fips-prng-RAND.h tracer.h 
	$(CC) $(CFLAGS) -I./  -I$(SDK_DIR) -I$(OSSLINC_DIR) -I$(OSSL_DIR) -I$(API_DIR) fips.c

#- Compile the FIPS prng code
fips-prng-err$(OBJSUFX): $(PRNG_DIR)/fips-prng-err.c $(PRNG_DIR)/fips-prng-err.h
	$(CC) $(CFLAGS)  -I$(OSSLINC_DIR) -I$(OSSL_DIR) $(PRNG_DIR)/fips-prng-err.c

fips-prng-RAND$(OBJSUFX): $(PRNG_DIR)/fips-prng-RAND.c $(PRNG_DIR)/fips-prng-RAND.h $(PRNG_DIR)/fips-prng-err.h icclib.h
	$(CC) $(CFLAGS)  -I./ -I$(TRNG_DIR) -I../$(ZLIB) -I$(OSSLINC_DIR) -I$(OSSL_DIR) -I$(API_DIR) $(PRNG_DIR)/fips-prng-RAND.c

SP800-90$(OBJSUFX): $(PRNG_DIR)/SP800-90.c $(PRNG_DIR)/ds.h \
	$(PRNG_DIR)/SP800-90.h $(PRNG_DIR)/SP800-90i.h
	$(CC) $(CFLAGS)  -I./ -I../$(ZLIB) -I$(SDK_DIR) -I$(OSSLINC_DIR) -I$(OSSL_DIR)  -I$(API_DIR) $(PRNG_DIR)/SP800-90.c

SP800-90HashData$(OBJSUFX): $(PRNG_DIR)/SP800-90HashData.c \
	 $(PRNG_DIR)/SP800-90.h $(PRNG_DIR)/SP800-90i.h
	$(CC) $(CFLAGS)  -I./  -I../$(ZLIB) -I$(SDK_DIR) -I$(OSSLINC_DIR) -I$(OSSL_DIR) -I$(API_DIR) $(PRNG_DIR)/SP800-90HashData.c

SP800-90Cipher$(OBJSUFX): $(PRNG_DIR)/SP800-90Cipher.c \
	 $(PRNG_DIR)/SP800-90.h $(PRNG_DIR)/SP800-90i.h
	$(CC) $(CFLAGS)  -I./  -I../$(ZLIB) -I$(SDK_DIR) -I$(OSSLINC_DIR) -I$(OSSL_DIR) -I$(API_DIR) $(PRNG_DIR)/SP800-90Cipher.c

SP800-90HMAC$(OBJSUFX): $(PRNG_DIR)/SP800-90HMAC.c \
	 $(PRNG_DIR)/SP800-90.h $(PRNG_DIR)/SP800-90i.h
	$(CC) $(CFLAGS)  -I./  -I../$(ZLIB) -I$(SDK_DIR) -I$(OSSLINC_DIR) -I$(OSSL_DIR) -I$(API_DIR) $(PRNG_DIR)/SP800-90HMAC.c

ds$(OBJSUFX): $(PRNG_DIR)/ds.c $(PRNG_DIR)/ds.h 
	$(CC) $(CFLAGS)  -I./ -I$(PRNG_DIR) $(PRNG_DIR)/ds.c

utils$(OBJSUFX): $(PRNG_DIR)/utils.c  $(PRNG_DIR)/utils.h
	$(CC) $(CFLAGS)  -I./ -I$(PRNG_DIR) $(PRNG_DIR)/utils.c

# KDF's

SP800-108$(OBJSUFX): SP800_108/SP800-108.c   SP800_108/SP800-108.h
	$(CC) $(CFLAGS)  -I./ -I$(SDK_DIR) -I$(OSSLINC_DIR) -I$(OSSL_DIR) -I$(API_DIR) SP800_108/SP800-108.c

# Key Wrap
SP80038F$(OBJSUFX): SP800_38F/SP80038F.c   SP800_38F/SP80038F.h
	$(CC) $(CFLAGS)  -I./ -Ifips-prng/ -I$(SDK_DIR) -I$(OSSLINC_DIR) -I$(OSSL_DIR) SP800_38F/SP80038F.c

#- Build platform dependent code

platform$(OBJSUFX): platform.c platform.h
	$(CC) $(CFLAGS) -I$(OSSLINC_DIR) -I$(OSSL_DIR) -I$(API_DIR)  -I./  -I$(SDK_DIR)/ platform.c

platfsl$(OBJSUFX): platfsl.c platfsl.h platform.h
	$(CC) $(CFLAGS)  -I$(OSSLINC_DIR) -I$(OSSL_DIR)  -I./  -I$(SDK_DIR)/ platfsl.c


#- Build ICC static library stub
$(STLPRFX)icc$(STLSUFX):  $(MYICC)$(OBJSUFX)
	$(AR) $(ARFLAGS) $(MYICC)$(OBJSUFX) $(ICCLIB_LINK)  

# Copy the ICC static library stub to the sdk dmake OPSYS=${OPSYS} icc;irectory
# Done this way so we can build fat libs on OS/X without circular dependencies
$(ICCLIB): $(SDK_DIR) $(STLPRFX)icc$(STLSUFX)
	$(CP)  $(STLPRFX)icc$(STLSUFX) $@


#- Compile the ICC static stub library source
#- part of SDK for OS400

# note zOS
# we need the copy for this one as the linker cannot handle if there is another icc.o/icc.c
# OLD_ICC (FIPS) and non-FIPS both have icc.c that will conflict in the link
$(MYICC).c: icc.c
	$(CP) icc.c $@

$(MYICC)$(OBJSUFX): $(MYICC).c $(SDK_DIR)/icc.h $(SDK_DIR)/icc_a.h platform.h iccversion.h
	$(CC) $(CFLAGS) $(SDKFLAGS) -I./ -I$(OSSLINC_DIR) -I$(OSSL_DIR) -I$(SDK_DIR) $(MYICC).c $(OUT)$@

#- Build ICC test executables
$(ICCTEST): $(ICCDLL) $(ICCLIB) icctest$(OBJSUFX) 
	$(LD) $(LDFLAGS) icctest$(OBJSUFX) $(ICCLIB) $(LDLIBS) 
	touch ICCTEST_BUILT

#- Compile the ICC test code source

icctest$(OBJSUFX):  icctest.c $(SDK_DIR)/icc.h $(SDK_DIR)/icc_a.h $(SDK_DIR)/iccglobals.h
	$(CC) $(CFLAGS)  -I./ -I $(SDK_DIR) icctest.c




$(OSSLOBJ_DIR)/$(SHLPRFX)crypto$(SHLSUFX).$(OPENSSL_LIBVER): Build_OSSL_Complete
	$(RM) $@
	-ln -s $(OSSLOBJ_DIR)/$(SHLPRFX)crypto$(SHLSUFX)  $@

#
# Bail if the directory isn't present - checked via the Configure script
#
Build_OSSL_Complete: $(OSSL_DIR)/Configure
	$(BUILD_OSSL)
	$(RM) $(ICCTEST) ICCTEST_BUILT
	touch Build_OSSL_Complete

#- Copy OpenSSL crypto library to package directory
# moved to platforms/_.mk (HP is special cased)

$(SLIBCRYPTO): Build_OSSL_Complete $(OSSLOBJ_DIR)/$(SHLPRFX)crypto$(SHLSUFX).$(OPENSSL_LIBVER)


#- Make directory for OpenSSL shared library
$(RTE_DIR)/osslib: $(RTE_DIR)
	$(MKDIR) $@

#- Make directory for OpenSSL shared library
$(RTE_DIR)/icclib: $(RTE_DIR)
	$(MKDIR) $@

$(RTE_DIR)/ReadMe.txt: $(RTE_DIR) ICC_ReadMe.txt
	$(CP) ICC_ReadMe.txt $@
	chmod +w $@
	-cat $(OSSL_DIR)/LICENSE >> $@

$(NOSHIP_RTE_DIR)/ReadMe.txt: ICC_ReadMe.txt
	$(CP) ICC_ReadMe.txt $@
	chmod +w $@
	-cat $(OSSL_DIR)/LICENSE >> $@

#- Make ICC RTE directory
$(RTE_DIR):
	$(MKDIR) $@


#- Assist in debugging Makefiles, show config. Also useful for build.
show_config:
	echo "Set in Makefile"
	echo "=========== Config ================"
	echo "ICC VERSION       = " "$(ICC_VERSION_VER).$(ICC_VERSION_REL)"
	echo "OPSYS  		= " "$(OPSYS)" 
	echo "CONFIG 		= " "$(CONFIG)"
	echo "BUILD  		= " "$(BUILD)"
	echo "ZLIB              = " "$(ZLIB)"
	echo "XPLINK            = " "$(XPLINK)"
	echo "========== Directories ============"
	echo "PACKAGE_DIR	= " "$(PACKAGE_DIR)"
	echo "RTE_DIR		= " "$(RTE_DIR)"
	echo "SDK_DIR		= " "$(SDK_DIR)"
	echo "PRNG_DIR		= " "$(PRNG_DIR)"
	echo "OSSL_RTE_DIR	= " "$(OSSL_RTE_DIR)"
	echo "ICC_RTE_DIR	= " "$(ICC_RTE_DIR)"
	echo "OSSL_DIR		= " "$(OSSL_DIR)"
	echo "ZLIB_DIR          = " "$(ZLIB_DIR)"
	echo "============= Files ==============="
	echo "ICCDLL_NAME	= " $(ICCDLL_NAME)
	echo "ICCDLL		= " $(ICCDLL)
	echo "ICCLIB		= " $(ICCLIB)
	echo "OSSLLIB		= " $(OSSLLIB)
	echo "ICCTEST		= " $(ICCTEST)
	echo "PRNGTST1		= " $(PRNGTST1)
	echo "PRNGTST2		= " $(PRNGTST2)
	echo "ICCSDK		= " $(ICCSDK)
	echo "ICCRTE		= " $(ICCRTE)	
	echo 
	echo "From platforms.mk"
	echo "========= System utils ============" 
	echo "RM 		= " "$(RM)"
	echo "MKDIR 		= " "$(MKDIR)"
	echo "CP		= " "$(CP)"
	echo "DEBUGGER		= " "$(DEBUGGER)"
	echo "CC		= " "$(CC)"
	echo "CXX		= " "$(CXX)"
	echo "CFLAGS		= " "$(CFLAGS)"
	echo "CFLAGS2		= " "$(CFLAGS2)"
	echo "LD		= " "$(LD)"
	echo "LD_CXX		= " "$(LD_CXX)"
	echo "SLD		= " "$(SLD)"
	echo "AR		= " "$(AR)"
	echo "STRIP		= " "$(STRIP)"
	echo "OUT		= " "$(OUT)"
	echo "ICC_RUN_SETUP     = " "$(ICC_RUN_SETUP)"
	echo "=========== Flags ================="
	echo "LDFLAGS		= " "$(LDFLAGS)"
	echo "SLDFLAGS		= " "$(SLDFLAGS)"
	echo "LDFLAGS2		= " "$(LDFLAGS2)"
	echo "SLDFLAGS2		= " "$(SLDFLAGS2)"
	echo "ARFLAGS		= " "$(ARFLAGS)"
	echo "LDLIBS		= " "$(LDLIBS)"
	echo "ICCLIB_LNK        = " "$(ICCLIB_LNK)"
	echo "======= Filename extensions ======="
	echo "OBJSUFX		= " "$(OBJSUFX)"
	echo "EXESUFX		= " "$(EXESUFX)"
	echo "SHLPRFX		= " "$(SHLPRFX)"
	echo "SHLSUFX		= " "$(SHLSUFX)"
	echo "STLPRFX		= " "$(STLPRFX)"
	echo "STLSUFX		= " "$(STLSUFX)"
	echo 
	echo "Set in opensslver.mk"
	echo "OPENSSL_LIBVER    = " "$(OPENSSL_LIBVER)"
	echo "OPENSSL_BIN       = " "$(OPENSSL_BIN)"
	echo "OSSL_FLAGS        = " "$(OSSL_FLAGS)"
	echo 
	echo "Set in icc_defs.mk"
	echo "EXPORT_FLAG	= " "$(EXPORT_FLAG)"
	echo "ICCLIB_EXPFILE	= " "$(ICCLIB_EXPFILE)"
	echo "OSSLLIB_NAME	= " "$(OSSLLIB_NAME)"
	echo "OSSLINC_DIR	= " "$(OSSLINC_DIR)"
	echo "OSSLOBJ_DIR	= " "$(OSSLOBJ_DIR)"
	echo "OPENSSL		= " "$(OPENSSL)"
	echo "BUILD_OSSL	= " "$(BUILD_OSSL)"
	echo "CLEAN_OSSL	= " "$(CLEAN_OSSL)"
	echo "TARCMD		= " "$(TARCMD)"
	echo "TEST_CMD		= " "$(TEST_CMD)"
	echo "ASM_TWEAKS	= " "$(ASM_TWEAKS)"
	echo "ASMMAK		= " "$(ASMMAK)"
	echo "ASMOBJS		= " "$(ASMOBJS)"
	echo "ICCLIB_FLAGS	= " "$(ICCLIB_FLAGS)"
	echo "OSOBJS		= " "$(OSOBJS)"
	echo "MAKE_ZLIB         = " "$(MAKE_ZLIB)"
	echo "EXTRAS            = " "$(EXTRAS)"
	echo "TARGETS           = " "$(TARGETS)"	
	echo "MANIFESTS         = " "$(MANIFESTS)"
	echo

show_ossl:
	echo "E_OBJ       	= " "$(E_OBJ)"
	echo "ASM_OBJS    	= " "$(ASM_OBJS)"
	echo "SLIBCRYPTO  	= " "$(SLIBCRYPTO)"
	echo "SLIBSSL     	= " "$(SLIBSSL)"
